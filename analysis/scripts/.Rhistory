group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
View(cadette)
cadette_players <- cadette$naam
cadette_players <- as.character(cadette$naam)
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
View(consecutive)
consecutive_players <- as.character(consecutive$naam)
?setdiff
intersect(cadette_players, consecutive_players)
results <- filter(results, naam %in% intersect(cadette_players, consecutive_players))
unique(results$naam)
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
unique(results$naam)
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## find players having started as cadette
cadette <- results %>%
group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
cadette_players <- as.character(cadette$naam)
## find players having no gaps for 5 consecutive seasons
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
consecutive_players <- as.character(consecutive$naam)
## only select players having no gaps + started as cadette
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
## add match number for each player
results <- arrange(results, naam)
results$match_nummer <- unlist(lapply(table(results$naam), function(x) 1:x))
## remove season 2009 since ELO reset in that year
results <- filter(results, seizoen != "2009")
### graph evolution
graph_evolution_rating <- ggplot(data = results,
aes(x = match_nummer, y = ELO, group = naam)) +
geom_line(aes(colour = leeftijdscategorie))
plot(graph_evolution_rating)
rm(list = ls§())
rm(list = ls())
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## find players having started as cadette
cadette <- results %>%
group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
cadette_players <- as.character(cadette$naam)
## find players having no gaps for 5 consecutive seasons
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
consecutive_players <- as.character(consecutive$naam)
## only select players having no gaps + started as cadette
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
## make sure there are no sudden ELO drops
View(results)
diff(results$ELO_verschil)
diff(results$ELO)
diff(results$ELO)
rm(list = ls§)
rm(list = ls())
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove matches without ELO or leeftijdscategorie
ELO_na <- is.na(results$ELO)
ELO_na <- which(is.na(results$ELO))
leeftijdscategorie_na <- which(is.na(results$leeftijdscategorie))
length(union(ELO_na, leeftijdscategorie_na))
results <- results[-union(ELO_na, leeftijdscategorie_na), ]
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove matches without ELO or leeftijdscategorie
ELO_na <- which(is.na(results$ELO))
leeftijdscategorie_na <- which(is.na(results$leeftijdscategorie))
results <- results[-union(ELO_na, leeftijdscategorie_na), ]
## find players having started as cadette
cadette <- results %>%
group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
cadette_players <- as.character(cadette$naam)
## find players having no gaps for 5 consecutive seasons
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
consecutive_players <- as.character(consecutive$naam)
## only select players having no gaps + started as cadette
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
## make sure there are no sudden ELO drops
View(results)
rm(list = ls())
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove matches without ELO or leeftijdscategorie
ELO_na <- which(is.na(results$ELO))
leeftijdscategorie_na <- which(is.na(results$leeftijdscategorie))
results <- results[-union(ELO_na, leeftijdscategorie_na), ]
## find players having started as cadette
cadette <- results %>%
group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
cadette_players <- as.character(cadette$naam)
## find players having no gaps for 5 consecutive seasons
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
consecutive_players <- as.character(consecutive$naam)
## only select players having no gaps + started as cadette
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
## add match number for each player
results <- arrange(results, naam)
results$match_nummer <- unlist(lapply(table(results$naam), function(x) 1:x))
## make sure there are no sudden ELO drops
View(results)
diff(results$ELO)
diff(results$ELO)
which(abs(diff(results$ELO)) > 100)
drops_ind <- which(abs(diff(results$ELO)) > 100)
drops <- results[c(drops_ind, drops_ind - 1), ]
View(drops)
c(drops_ind, drops_ind - 1)
drops_ind
drops_ind - 1
c(drops_ind, drops_ind - 1)
sort(c(drops_ind, drops_ind - 1))
drops <- results[sort(c(drops_ind, drops_ind - 1)), ]
View(drops)
rm(list = ls())
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove matches without ELO or leeftijdscategorie
ELO_na <- which(is.na(results$ELO))
leeftijdscategorie_na <- which(is.na(results$leeftijdscategorie))
results <- results[-union(ELO_na, leeftijdscategorie_na), ]
## find players having started as cadette
cadette <- results %>%
group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
cadette_players <- as.character(cadette$naam)
## find players having no gaps for 5 consecutive seasons
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
consecutive_players <- as.character(consecutive$naam)
## only select players having no gaps + started as cadette
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
## add match number for each player
results <- arrange(results, naam)
results$match_nummer <- unlist(lapply(table(results$naam), function(x) 1:x))
View(results)
table(results$naam)
results <- arrange(results, naam, datum)
View(results)
drops_ind <- which(abs(diff(results$ELO)) > 100)
sort(c(drops_ind, drops_ind - 1))
drops_ind
diff(c(1,3,7))
drops <- results[sort(c(drops_ind, drops_ind - 1)), ]
View(drops)
diff(results$ELO)
View(results)
range(results$ELO_verandering)
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove matches without ELO or leeftijdscategorie
ELO_na <- which(is.na(results$ELO))
leeftijdscategorie_na <- which(is.na(results$leeftijdscategorie))
results <- results[-union(ELO_na, leeftijdscategorie_na), ]
## find players having started as cadette
cadette <- results %>%
group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
cadette_players <- as.character(cadette$naam)
## find players having no gaps for 5 consecutive seasons
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
consecutive_players <- as.character(consecutive$naam)
## only select players having no gaps + started as cadette
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
## add match number for each player
results <- arrange(results, naam)
results$match_nummer <- unlist(lapply(table(results$naam), function(x) 1:x))
## make sure there are no sudden ELO drops
results <- arrange(results, naam, datum)
drops_ind <- which(abs(diff(results$ELO)) > 100)
View(drops)
results <- arrange(results, naam, datum)
View(results)
### graph evolution
graph_evolution_rating <- ggplot(data = results,
aes(x = match_nummer, y = ELO, group = naam)) +
geom_line(aes(colour = leeftijdscategorie))
plot(graph_evolution_rating)
graph_evolution_rating <- ggplot(data = results,
aes(x = match_nummer, y = ELO, group = naam)) +
geom_line(aes(colour = naam))
plot(graph_evolution_rating)
graph_evolution_rating <- ggplot(data = filter(results, naam == "JEROEN VAN DER HOOFT"),
aes(x = match_nummer, y = ELO, group = naam)) +
geom_line(aes(colour = naam))
plot(graph_evolution_rating)
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove matches without ELO or leeftijdscategorie
ELO_na <- which(is.na(results$ELO))
leeftijdscategorie_na <- which(is.na(results$leeftijdscategorie))
results <- results[-union(ELO_na, leeftijdscategorie_na), ]
## find players having started as cadette
cadette <- results %>%
group_by(naam) %>%
summarise(cadet = sum("Cadetten" %in% leeftijdscategorie)) %>%
filter(cadet == "1")
cadette_players <- as.character(cadette$naam)
## find players having no gaps for 5 consecutive seasons
consecutive <- results %>%
group_by(naam, seizoen) %>%
summarise(n = n()) %>%
group_by(naam) %>%
summarise(n = n(),
opeenvolgend = sum(diff(as.numeric(as.character(seizoen))) > 1)) %>%
filter(opeenvolgend == "0", n >= 5)
consecutive_players <- as.character(consecutive$naam)
## only select players having no gaps + started as cadette
results <- droplevels(filter(results, naam %in% intersect(cadette_players, consecutive_players)))
## add match number for each player
results <- arrange(results, naam)
results$match_nummer <- unlist(lapply(table(results$naam), function(x) 1:x))
## make sure there are no sudden ELO drops
results <- arrange(results, naam, datum)
drops_ind <- which(abs(diff(results$ELO)) > 100)
drops <- results[sort(c(drops_ind, drops_ind - 1)), ]
### graph evolution
graph_evolution_rating <- ggplot(data = filter(results, naam == "JEROEN VAN DER HOOFT"),
aes(x = match_nummer, y = ELO, group = naam)) +
geom_line(aes(colour = naam))
plot(graph_evolution_rating)
diff(filter(results, naam == "JEROEN VAN DER HOOFT")[["ELO"]])
which(abs(diff(filter(results, naam == "JEROEN VAN DER HOOFT")[["ELO"]])) > 100)
test <- filter(results, naam == "JEROEN VAN DER HOOFT")
test <- test[c(175:180, 245:250), ]
View(test)
rm(list = ls())
### packages
library(plyr)
library(dplyr)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### add variables
## numerical interpretation ranking category
klassering_levels <- sort(as.character(unique(results$klassering_tegenstander)))
results$klassering_num <- mapvalues(x = results$klassering,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_tegenstander_num <- mapvalues(x = results$klassering_tegenstander,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_num <- as.numeric(as.character(results$klassering_num))
results$klassering_tegenstander_num <- as.numeric(as.character(results$klassering_tegenstander_num))
## calculate quality differences
# ranking category
results <- mutate(results, klassering_verschil = klassering_num - klassering_tegenstander_num)
# ELO
results <- mutate(results, ELO_verschil = ELO - ELO_tegenstander)
## calculate expected scores using ELO formula
results$verwachte_score <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
## numeric version result
results$resultaat_num <- as.numeric(as.character(mapvalues(x = results$resultaat,
from = c("V","W"),
to = 0:1)))
## calculate difference ELO expected versus result
results <- mutate(results, ELO_voorspelling_verschil = abs(verwachte_score - resultaat_num))
results <- mutate(results, ELO_voorspelling_verschil_neg = resultaat_num - verwachte_score)
View(results)
results <- arrange(naam, datum)
names(results)
results <- arrange(results, naam, datum)
View(results)
?tapply
funky_gaps <- results %>%
group_by(naam) %>%
summarise(ELO_lag = diff(ELO))
View(funky_gaps)
funky_gaps <- results %>%
group_by(naam) %>%
summarise(ELO_lag = diff(ELO),
naam = naam)
funky_gaps <- results %>%
group_by(naam) %>%
summarise(ELO_lag = diff(ELO),
naam)
funky_gaps <- results %>%
group_by(naam) %>%
summarise(ELO_lag = diff(ELO))
View(funky_gaps)
funky_gaps_ind <- which(funky_gaps > 100)
test <- results[c(funky_gaps_ind, funky_gaps_ind + 1), ]
View(test)
test <- results[sort(c(funky_gaps_ind, funky_gaps_ind + 1)), ]
View(test)
range(funky_gaps_ind)
funky_gaps <- results %>%
group_by(naam) %>%
summarise(ELO_lag = diff(ELO))
funky_gaps_ind <- which(abs(funky_gaps) > 100)
test <- results[sort(c(funky_gaps_ind, funky_gaps_ind + 1)), ]
View(test)
funky_gaps <- results %>%
group_by(naam) %>%
summarise(ELO_lag = diff(ELO))
table(results$naam)
View(funky_gaps)
funky_gaps <- diff(results$ELO)
funky_gaps <- abs(diff(results$ELO))
funky_gaps_ind <- setdiff(which(funky_gaps > 100), table(results$naam))
test <- results[sort(c(funky_gaps_ind, funky_gaps_ind + 1)), ]
View(test)
rm(list = ls())
### packages
library(plyr)
library(dplyr)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### add variables
## numerical interpretation ranking category
klassering_levels <- sort(as.character(unique(results$klassering_tegenstander)))
results$klassering_num <- mapvalues(x = results$klassering,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_tegenstander_num <- mapvalues(x = results$klassering_tegenstander,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_num <- as.numeric(as.character(results$klassering_num))
results$klassering_tegenstander_num <- as.numeric(as.character(results$klassering_tegenstander_num))
## calculate quality differences
# ranking category
results <- mutate(results, klassering_verschil = klassering_num - klassering_tegenstander_num)
# ELO
results <- mutate(results, ELO_verschil = ELO - ELO_tegenstander)
## calculate expected scores using ELO formula
results$verwachte_score <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
## numeric version result
results$resultaat_num <- as.numeric(as.character(mapvalues(x = results$resultaat,
from = c("V","W"),
to = 0:1)))
## calculate difference ELO expected versus result
results <- mutate(results, ELO_voorspelling_verschil = abs(verwachte_score - resultaat_num))
results <- mutate(results, ELO_voorspelling_verschil_neg = resultaat_num - verwachte_score)
## variable taking into account ELO funky gaps
funky_gaps <- results %>%
group_by(name, seizoen) %>%
summarise(min = min(ELO),
max = max(ELO))
View(funky_gaps)
funky_gaps <- results %>%
group_by(name, seizoen) %>%
summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
View(funky_gaps)
funky_gaps <- results %>% ungroup() %>%
group_by(name, seizoen) %>%
summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
funky_gaps <- results %>% ungroup() %>%
group_by(name, seizoen) %>%
summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
funky_gaps <- results %>%
group_by(name, seizoen) %>%
dplyr::summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
funky_gaps <- results %>%
group_by(naam, seizoen) %>%
summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
?group_by
funky_gaps <- results %>%
group_by(naam, seizoen) %>%
summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
View(funky_gaps)
funky_gaps <- results %>%
group_by(naam) %>%
summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
### packages
library(plyr)
library(dplyr)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### add variables
## numerical interpretation ranking category
klassering_levels <- sort(as.character(unique(results$klassering_tegenstander)))
results$klassering_num <- mapvalues(x = results$klassering,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_tegenstander_num <- mapvalues(x = results$klassering_tegenstander,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_num <- as.numeric(as.character(results$klassering_num))
results$klassering_tegenstander_num <- as.numeric(as.character(results$klassering_tegenstander_num))
## calculate quality differences
# ranking category
results <- mutate(results, klassering_verschil = klassering_num - klassering_tegenstander_num)
# ELO
results <- mutate(results, ELO_verschil = ELO - ELO_tegenstander)
## calculate expected scores using ELO formula
results$verwachte_score <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
## numeric version result
results$resultaat_num <- as.numeric(as.character(mapvalues(x = results$resultaat,
from = c("V","W"),
to = 0:1)))
## calculate difference ELO expected versus result
results <- mutate(results, ELO_voorspelling_verschil = abs(verwachte_score - resultaat_num))
results <- mutate(results, ELO_voorspelling_verschil_neg = resultaat_num - verwachte_score)
## variable taking into account ELO funky gaps
funky_gaps <- results %>%
group_by(naam, seizoen) %>%
summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
View(funky_gaps)
class(results$ELO)
results$ELO
funky_gaps <- results
funky_gaps <- results %>%
group_by(naam, seizoen)
str(funky_gaps)
funky_gaps <- results %>%
group_by(naam, seizoen) %>%
summarise(min = min(ELO, na.rm = TRUE))
View(funky_gaps)
funky_gaps <- results %>%
group_by(naam, seizoen) %>%
summarise(min(ELO, na.rm = TRUE))
?min
funky_gaps <- results %>% group_by(naam, seizoen) %>% summarise(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
?group_by
groups(funky_gaps)
funky_gaps <- results %>%
group_by(naam, seizoen) %>%
summarize(min = min(ELO, na.rm = TRUE),
max = max(ELO, na.rm = TRUE))
funky_gaps <- results %>% filter(naam == "JEROEN VAN DER HOOFT")
