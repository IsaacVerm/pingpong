### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
## numerical interpretation ranking category
klassering_levels <- sort(as.character(unique(results$klassering_tegenstander)))
results$klassering_num <- mapvalues(x = results$klassering,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_tegenstander_num <- mapvalues(x = results$klassering_tegenstander,
from = klassering_levels,
to = 1:length(klassering_levels))
View(results)
results$klassering_num <- as.numeric(as.character(results$klassering_num))
results$klassering_tegenstander_num <- as.numeric(as.character(results$klassering_tegenstander_num))
View(results)
results <- mutate(results, klassering_verschil = klassering_num - klassering_tegenstander_num)
View(results)
sapply(results, class)
results <- mutate(results, ELO_verschil = ELO - ELO_tegenstander)
View(results)
klassering_verschil_naam <- filter(results, resultaat == "V") %>% group_by(naam) %>% summarise(min(klassering_verschil))
View(klassering_verschil_naam)
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
summarise(klassering_verschil = min(klassering_verschil),
aantal_wedstrijden = n())
View(klassering_verschil_naam)
View(klassering_verschil_naam)
View(results)
test <- results %>% group_by(naam) %>% summarise(n = n())
View(test)
test <- results %>% group_by(naam) %>% summarise(n = n(), klassering = klassering)
View(test)
test <- results %>% group_by(naam) %>% summarise(n = n())
View(test)
test <- filter(results, resultaat == "V")
View(test)
rm(list = ls())
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### packages
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### add variables
## numerical interpretation ranking category
klassering_levels <- sort(as.character(unique(results$klassering_tegenstander)))
results$klassering_num <- mapvalues(x = results$klassering,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_tegenstander_num <- mapvalues(x = results$klassering_tegenstander,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_num <- as.numeric(as.character(results$klassering_num))
results$klassering_tegenstander_num <- as.numeric(as.character(results$klassering_tegenstander_num))
## calculate quality differences
# ranking category
results <- mutate(results, klassering_verschil = klassering_num - klassering_tegenstander_num)
# ELO
results <- mutate(results, ELO_verschil = ELO - ELO_tegenstander)
View(results)
?save
?write.csv
### packages
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### add variables
## numerical interpretation ranking category
klassering_levels <- sort(as.character(unique(results$klassering_tegenstander)))
results$klassering_num <- mapvalues(x = results$klassering,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_tegenstander_num <- mapvalues(x = results$klassering_tegenstander,
from = klassering_levels,
to = 1:length(klassering_levels))
results$klassering_num <- as.numeric(as.character(results$klassering_num))
results$klassering_tegenstander_num <- as.numeric(as.character(results$klassering_tegenstander_num))
## calculate quality differences
# ranking category
results <- mutate(results, klassering_verschil = klassering_num - klassering_tegenstander_num)
# ELO
results <- mutate(results, ELO_verschil = ELO - ELO_tegenstander)
### save data
save_path <- "C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\"
save(results, paste0(save_path, "extra_tccmaldegem_ledenresultaten.RData"))
write.csv(results, paste0(save_path, "extra_tccmaldegem_ledenresultaten.csv"))
paste0(save_path, "extra_tccmaldegem_ledenresultaten.RData")
save(results, paste0(save_path, "extra_tccmaldegem_ledenresultaten.RData"))
?save
save(results, file = paste0(save_path, "extra_tccmaldegem_ledenresultaten.RData"))
rm(list = ls())
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
sapply(results, class)
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
View(results)
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
summarise(klassering_verschil = top_n(5, klassering_verschil))
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam)
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
summarise(verschil = top_n(5, klassering_verschil))
?top_n
## ranking category
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
top_n(n = 5, wt = klassering_verschil)
View(klassering_verschil_naam)
18581/666
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
top_n(5)
View(klassering_verschil_naam)
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
top_n(5, klassering_verschil)
View(klassering_verschil_naam)
?Batting
library(Lahman)
require("Lahman")
?Batting
?top_n
?top_n
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam)
str(klassering_verschil_naam)
class(klassering_verschil_naam)
## ranking category
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
top_n(5, klassering_verschil)
View(klassering_verschil_naam)
klassering_verschil_naam <- filter(results, resultaat == "V") %>%
group_by(naam) %>%
top_n(5, desc(klassering_verschil))
View(klassering_verschil_naam)
rm(list = ls())
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
### categorical ranking
?geom_histogram
View(results)
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram() +
facet_wrap(~klassering)
plot(graph_elo_within_category)
?facet_wrap
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram() +
facet_wrap(~klassering, scales = "free_x")
plot(graph_elo_within_category)
?geom_freqpoly
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_freqpoly() +
facet_wrap(~klassering, scales = "free_x")
plot(graph_elo_within_category)
?freqpoly
?freqpoly
?geom_freqpoly
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_freqpoly(aes(y = ..density..)) +
facet_wrap(~klassering, scales = "free_x")
plot(graph_elo_within_category)
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(aes(y = ..density..)) +
facet_wrap(~klassering, scales = "free_x")
plot(graph_elo_within_category)
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(aes(y = ..density..), bins = 10) +
facet_wrap(~klassering, scales = "free_x")
plot(graph_elo_within_category)
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(bins = 10) +
facet_wrap(~klassering, scales = "free_x")
plot(graph_elo_within_category)
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(bins = 10) +
facet_wrap(~klassering, scales = "free")
plot(graph_elo_within_category)
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(bins = 10) +
facet_wrap(~klassering, scales = "free") +
labs(title = "ELO variatie binnen klassering",
x = "ELO",
y = "aantal wedstrijden")
plot(graph_elo_within_category)
warnings(ยง)
warnings()
range(results$ELO)
range(results$ELO, na.rm = TRUE)
bias_higher_categories <- results %>% group_by(klassering) %>% summarise(max_verschil = max(abs(klassering_verschil)))
View(bias_higher_categories)
bias_higher_categories <- results %>% group_by(klassering) %>% summarise(min_verschil = min(klassering_verschil))
View(bias_higher_categories)
bias_higher_categories <- results %>% group_by(klassering) %>% summarise(min_verschil = abs(min(klassering_verschil)))
View(bias_higher_categories)
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(min_verschil)
View(bias_higher_categories)
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(min_verschil)
graph_bias_higher_categories <- ggplot(data = bias_higher_categories,
aes(x = klassering, y = min_verschil)) +
geom_bar(stat = "identity")
plot(graph_bias_higher_categories)
## bias towards higher categories
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(-min_verschil)
graph_bias_higher_categories <- ggplot(data = bias_higher_categories,
aes(x = klassering, y = min_verschil)) +
geom_bar(stat = "identity")
## bias towards higher categories
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(min_verschil)
graph_bias_higher_categories <- ggplot(data = bias_higher_categories,
aes(x = klassering, y = min_verschil)) +
geom_bar(stat = "identity") +
labs(titel = "Bias richting hogere klasseringen",
x = "klassering",
y = "maximale nederlaag")
plot(graph_bias_higher_categories)
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(min_verschil)
graph_bias_higher_categories <- ggplot(data = bias_higher_categories,
aes(x = klassering, y = min_verschil)) +
geom_bar(stat = "identity") +
labs(title = "Bias richting hogere klasseringen",
x = "klassering",
y = "maximale nederlaag")
plot(graph_bias_higher_categories)
max(abs(results$ELO_verschil))
max(abs(results$ELO_verschil), na.rm = TRUE)
test <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
range(test)
range(test, na.rm = TRUE)
results$winstkans <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
View(results)
sapply(results, class)
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
### drawbacks categorical ranking
## ELO variation within category
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(bins = 10) +
facet_wrap(~klassering, scales = "free") +
labs(title = "ELO variatie binnen klassering",
x = "ELO",
y = "aantal wedstrijden")
plot(graph_elo_within_category)
## bias towards higher categories
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(min_verschil)
graph_bias_higher_categories <- ggplot(data = bias_higher_categories,
aes(x = klassering, y = min_verschil)) +
geom_bar(stat = "identity") +
labs(title = "Bias richting hogere klasseringen",
x = "klassering",
y = "maximale nederlaag")
plot(graph_bias_higher_categories)
### drawbacks ELO
## maximum ELO difference
max(abs(results$ELO_verschil), na.rm = TRUE)
## calculate expected scores
results$verwachte_score <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
results <- arrange(results, ELO_verschil)
View(results)
rep(1:nr_groups, each = nrow(results)/nr_groups)
nr_groups <- 20
rep(1:nr_groups, each = nrow(results)/nr_groups)
results$ELO_groep <- factor(rep(1:nr_groups, each = nrow(results)/nr_groups))
View(results)
nrow(results)/nr_groups
nr_groups <- 20
results$ELO_groep <- factor(rep(1:nr_groups, each = nrow(results)/nr_groups))
results$ELO_groep[(nrow_results - 100):nrow(results)] <- nr_groups
nr_groups <- 20
results$ELO_groep <- factor(rep(1:nr_groups, each = nrow(results)/nr_groups))
results$ELO_groep[(nrow(results) - 100):nrow(results)] <- nr_groups
View(results)
sum(is.na(results$ELO_verschil))
rm(list = ls())
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
## remove matches without ELO difference
is.na(results$ELO_verschil)
sum(is.na(results$ELO_verschil))
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
## remove matches without ELO difference
results <- results[!is.na(results$ELO_verschil), ]
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
## remove matches without ELO difference
results <- results[!is.na(results$ELO_verschil), ]
### drawbacks categorical ranking
## ELO variation within category
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(bins = 10) +
facet_wrap(~klassering, scales = "free") +
labs(title = "ELO variatie binnen klassering",
x = "ELO",
y = "aantal wedstrijden")
plot(graph_elo_within_category)
## bias towards higher categories
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(min_verschil)
graph_bias_higher_categories <- ggplot(data = bias_higher_categories,
aes(x = klassering, y = min_verschil)) +
geom_bar(stat = "identity") +
labs(title = "Bias richting hogere klasseringen",
x = "klassering",
y = "maximale nederlaag")
plot(graph_bias_higher_categories)
### drawbacks ELO
## maximum ELO difference
max(abs(results$ELO_verschil), na.rm = TRUE)
## calculate expected scores
results$verwachte_score <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
## divide in ELO groups
results <- arrange(results, ELO_verschil)
nr_groups <- 20
results$ELO_groep <- factor(rep(1:nr_groups, each = nrow(results)/nr_groups))
results$ELO_groep[(nrow(results) - 100):nrow(results)] <- nr_groups
warnings()
class(warnings())
str(warnings())
View(results)
table(results$ELO_groep)
names(results)
0:1
rm(list = ls())
### packages
library(plyr)
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\extra_tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
## remove matches without ELO difference
results <- results[!is.na(results$ELO_verschil), ]
### drawbacks categorical ranking
## ELO variation within category
graph_elo_within_category <- ggplot(data = results,
aes(x = ELO)) +
geom_histogram(bins = 10) +
facet_wrap(~klassering, scales = "free") +
labs(title = "ELO variatie binnen klassering",
x = "ELO",
y = "aantal wedstrijden")
plot(graph_elo_within_category)
## bias towards higher categories
bias_higher_categories <- results %>%
group_by(klassering) %>%
summarise(min_verschil = abs(min(klassering_verschil))) %>%
arrange(min_verschil)
graph_bias_higher_categories <- ggplot(data = bias_higher_categories,
aes(x = klassering, y = min_verschil)) +
geom_bar(stat = "identity") +
labs(title = "Bias richting hogere klasseringen",
x = "klassering",
y = "maximale nederlaag")
plot(graph_bias_higher_categories)
### drawbacks ELO
## maximum ELO difference
max(abs(results$ELO_verschil), na.rm = TRUE)
## calculate expected scores
results$verwachte_score <- 1/(1 + 10^((results$ELO_tegenstander - results$ELO)/400))
## divide in ELO groups
results <- arrange(results, ELO_verschil)
nr_groups <- 20
results$ELO_groep <- factor(rep(1:nr_groups, each = nrow(results)/nr_groups))
results$ELO_groep[(nrow(results) - 100):nrow(results)] <- nr_groups
## difference average expected score / average victory percentage
results$resultaat_num <- mapvalues(x = results$resultaat,
from = c("V","W"),
to = 0:1)
View(results)
results <- mutate(results, ELO_voorspelling_verschil = abs(verwachte_score - resultaat_num))
View(results)
sapply(results, class)
results$resultaat_num <- as.numeric(as.character(mapvalues(x = results$resultaat,
from = c("V","W"),
to = 0:1)))
View(results)
results <- mutate(results, ELO_voorspelling_verschil = abs(verwachte_score - resultaat_num))
View(results)
graph_expected_score_difference <- ggplot(data = results,
aes(x = ELO_verschil, y = ELO_voorspelling_verschil)) +
geom_point()
plot(graph_expected_score_difference)
results$ELO_correct <- 0
results$ELO_correct[results$ELO_voorspelling_verschil >= 0.5] <- 1
View(results)
results$ELO_correct <- 1
results$ELO_correct[results$ELO_voorspelling_verschil >= 0.5] <- 0
View(results)
graph_expected_score_difference <- ggplot(data = results,
aes(x = ELO_correct)) +
geom_histogram()
plot(graph_expected_score_difference)
expected_score_difference <- results %>%
group_by(ELO_groep) %>%
summarize(avg = mean(ELO_correct))
View(expected_score_difference)
expected_score_difference <- results %>%
group_by(ELO_groep) %>%
summarize(avg = mean(ELO_correct),
n = n())
View(expected_score_difference)
View(results)
graph_expected_score_difference <- ggplot(data = expected_score_difference,
aes(x = avg)) +
geom_histogram()
plot(graph_expected_score_difference)
graph_expected_score_difference <- ggplot(data = expected_score_difference,
aes(x = ELO_groep)) +
geom_histogram()
plot(graph_expected_score_difference)
graph_expected_score_difference <- ggplot(data = expected_score_difference,
aes(x = ELO_groep)) +
geom_bar(stat = "identity")
plot(graph_expected_score_difference)
graph_expected_score_difference <- ggplot(data = expected_score_difference,
aes(x = ELO_groep, y = avg)) +
geom_bar(stat = "identity")
plot(graph_expected_score_difference)
View(results)
