# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
sapply(results, ,ncol)
sapply(results,ncol)
library(data.table)
results <- rbindlist(results)
View(results)
table(results$X1)
names(results)
str(results)
?select
results <- select(results, -X1, -X13)
View(results)
complete.cases(select(results, X2:X12))
complete.cases(select(results, X2:X12))
results <- results[complete.cases(select(results, X2:X12)), ]
View(results)
results[1, ]
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verschil",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
View(results)
results <- results[-1, ]
View(results)
results$sets[1]
results$sets[100]
results$sets[1000]
results$gewonnen_sets <- substr(results$sets, 1, 1)
View(results)
sapply(results$sets, nchar)
table(sapply(results$sets, nchar))
results$verloren_sets <- substr(results$sets, 7, 7)
View(results)
?gsub
results$sets <- gsub(pattern = "Â SetsÂ",
replacement = NA,
x = results$sets)
View(results)
table(sapply(results$sets, nchar))
results$sets <- gsub(pattern = "Â SetsÂ",
replacement = "onbekend",
x = results$sets)
table(sapply(results$sets, nchar))
library(stringr)
results$sets <- str_replace(string = results$sets,
pattern = "Sets",
replacement = NA)
View(results)
## add fixed values to results
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verschil",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
## remove incorrect header row
results <- results[-1, ]
## correct column values
View(results)
?grep
grep(pattern = "Sets", x = results$sets)
results$sets[grep(pattern = "Sets", x = results$sets)] <- NA
View(results)
grep(pattern = "Datum", x = results$datum)
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
results <- results[-grep(pattern = "Datum", x = results$datum), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verschil",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
## remove incorrect header row
results <- results[-1, ]
## correct column values
View(results)
## add fixed values to results
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
results <- results[-grep(pattern = "Datum", x = results$datum), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verschil",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
View(results)
rm(test)
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
results <- results[complete.cases(select(results, X2:X12)), ]
grep(pattern = "Datum", x = results$datum)
results <- results[-grep(pattern = "Datum", x = results$X2), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verschil",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
View(results)
sapply(results$sets, nchar)
table(sapply(results$sets, nchar))
results$gewonnen_sets <- substr(results$sets, 1, 1)
results$verloren_sets <- substr(results$sets, 7, 7)
results$sets <- NULL
View(results)
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verandering",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
results <- results[-grep(pattern = "Datum", x = results$X2), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verandering",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
## correct column values
View(results)
# sets
results$gewonnen_sets <- substr(results$sets, 1, 1)
results$verloren_sets <- substr(results$sets, 7, 7)
View(results)
results$sets <- NULL
test <- as.numeric(ELO_verandering)
test <- as.numeric(results$ELO_verandering)
table(results$ELO_verandering)
table(sapply(results$klassering, nchar))
table(sapply(results$klassering, nchar))
table(sapply(as.character(results$klassering), nchar))
results$klassering <- substr(results$klassering, 19, 20)
View(results)
table(results$klassering)
test <- lapply(results$leeftijdscategorie, function(x) str_split(string = x, pattern = ""))
test <- lapply(results$leeftijdscategorie, function(x) str_split(string = x, pattern = " "))
cat(results$leeftijdscategorie[1])
print(results$leeftijdscategorie[1])
test <- lapply(results$leeftijdscategorie, function(x) str_split(string = x, pattern = "Â"))
test <- lapply(results$leeftijdscategorie, function(x) str_trim(str_split(string = x, pattern = "Â")))
test <- lapply(results$leeftijdscategorie, function(x) str_split(string = x, pattern = "Â"))
table(sapply(test, length))
table(sapply(test, function(x) x[[1]]length))
table(sapply(test, function(x) length(x[[1]]))
table(sapply(test, function(x) length(x[[1]])
table(sapply(test, function(x) length(x[[1]]))
table(sapply(test, function(x) length(x[[1]])))
test <- lapply(results$leeftijdscategorie, function(x) str_trim(str_split(string = x, pattern = "Â")[3]))
test <- lapply(results$leeftijdscategorie, function(x) str_split(string = x, pattern = "Â")[3])
test <- lapply(results$leeftijdscategorie, function(x) str_split(string = x, pattern = "Â"))
?str_split
?split_str
?split
test <- lapply(results$leeftijdscategorie, function(x) strsplit(x, split = "Â")[3])
test <- lapply(results$leeftijdscategorie, function(x) strsplit(x, split = "Â"))
test <- lapply(results$leeftijdscategorie, function(x) strsplit(x, split = " "))
test <- str_split(string = results$leeftijdscategorie, pattern = "Â")
test <- sapply(str_split(string = results$leeftijdscategorie, pattern = "Â"), function(x) x[3])
test <- str_trim(sapply(str_split(string = results$leeftijdscategorie, pattern = "Â"), function(x) x[3]))
test[1:100]
results$leeftijdscategorie <- str_trim(sapply(str_split(string = results$leeftijdscategorie, pattern = "Â"), function(x) x[3]))
View(results)
table(results$leeftijdscategorie)
sapply(results, class)
test <- as.Date(results$datum)
substr(results$seizoen, 9, 12)
table(substr(results$seizoen, 9, 12))
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
results <- results[-grep(pattern = "Datum", x = results$X2), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verandering",
"voornaam","naam","seizoen","klassering","leeftijdscategorie")
## correct column values
# sets
results$gewonnen_sets <- substr(results$sets, 1, 1)
results$verloren_sets <- substr(results$sets, 7, 7)
results$sets <- NULL
# season
results$seizoen <- substr(results$seizoen, 9, 12)
# rating
results$klassering <- substr(results$klassering, 19, 20)
# age category
results$leeftijdscategorie <- str_trim(sapply(str_split(string = results$leeftijdscategorie, pattern = "Â"), function(x) x[3]))
## correct data types
# date
results$datum <- as.Date(results$datum)
View(results)
?funs
results <- results %>% mutate_each_(funs(factor), factor_var) %>% mutate_each_(funs(as.numeric), num_var)
factor_var <- c("geslacht","toernooi_id","reeks","club_tegenstander","klassering_tegenstander",
"seizoen","klassering","leeftijdscategorie")
num_var <- c("ELO_tegenstander","ELO","ELO_verandering","gewonnen_sets","verloren_sets")
results <- results %>% mutate_each_(funs(factor), factor_var) %>% mutate_each_(funs(as.numeric), num_var)
View(results)
sapply(results, class)
warnings()
rm(list = ls())
getwd()
htmls <- lapply(list.files("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten",
pattern = ".xml",
full.names = TRUE),
read_html)
## function to extract
extract <- function(html) {
# match information list
match_information <- list()
# extract name
xpath_first_name <- "//div[@style='font-size: 175%;']"
xpath_surname <- "//div[@style='font-size: 210%;']"
match_information$first_name <- html_node(html, xpath = xpath_first_name) %>% html_text()
match_information$surname <- html_node(html, xpath = xpath_surname) %>% html_text()
# extract season
xpath_season <- "//*[text()[contains(.,'Seizoen')]]"
match_information$season <- html_nodes(html, xpath = xpath_season) %>% html_text() %>% .[[2]]
# extract ranking
xpath_ranking <- "//*[text()[contains(.,'Rangschikking')]]"
match_information$ranking <- html_nodes(html, xpath = xpath_ranking) %>% html_text() %>% .[[2]]
# extract age category
xpath_age_category <- "//*[text()[contains(.,'Categorie')]]"
match_information$age_category <- html_nodes(html, xpath = xpath_age_category) %>% html_text() %>% .[[2]]
# extract match results
xpath_match_results <- "//div[@id='match_list']/table"
match_information$match_results <- try(html_node(html, xpath = xpath_match_results) %>% html_table())
# return result
return(match_information) }
## extract
match_information <- lapply(htmls, function(x) extract(x))
### bind together
## remove pages without results
match_information <- match_information[!sapply(match_information, function(x) class(x[["match_results"]])) == "try-error"]
## add fixed values to results
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
results <- results[-grep(pattern = "Datum", x = results$X2), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verandering",
"voornaam","familienaamnaam","seizoen","klassering","leeftijdscategorie")
## correct column values
# sets
results$gewonnen_sets <- substr(results$sets, 1, 1)
results$verloren_sets <- substr(results$sets, 7, 7)
results$sets <- NULL
# season
results$seizoen <- substr(results$seizoen, 9, 12)
# rating
results$klassering <- substr(results$klassering, 19, 20)
# age category
results$leeftijdscategorie <- str_trim(sapply(str_split(string = results$leeftijdscategorie, pattern = "Â"), function(x) x[3]))
## add variable naam
View(results)
results <- mutate(results, naam = paste(voornaam, familienaam, sep = " "))
View(results)
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verandering",
"voornaam","familienaam","seizoen","klassering","leeftijdscategorie")
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
results <- results[-grep(pattern = "Datum", x = results$X2), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verandering",
"voornaam","familienaam","seizoen","klassering","leeftijdscategorie")
## correct column values
# sets
results$gewonnen_sets <- substr(results$sets, 1, 1)
results$verloren_sets <- substr(results$sets, 7, 7)
results$sets <- NULL
# season
results$seizoen <- substr(results$seizoen, 9, 12)
# rating
results$klassering <- substr(results$klassering, 19, 20)
# age category
results$leeftijdscategorie <- str_trim(sapply(str_split(string = results$leeftijdscategorie, pattern = "Â"), function(x) x[3]))
## add variables
# name
View(results)
results <- mutate(results, naam = paste(voornaam, familienaam, sep = " "))
View(results)
results$gewonnen_sets - results$verloren_sets
rm(list = ls())
htmls <- lapply(list.files("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten",
pattern = ".xml",
full.names = TRUE),
read_html)
extract <- function(html) {
# match information list
match_information <- list()
# extract name
xpath_first_name <- "//div[@style='font-size: 175%;']"
xpath_surname <- "//div[@style='font-size: 210%;']"
match_information$first_name <- html_node(html, xpath = xpath_first_name) %>% html_text()
match_information$surname <- html_node(html, xpath = xpath_surname) %>% html_text()
# extract season
xpath_season <- "//*[text()[contains(.,'Seizoen')]]"
match_information$season <- html_nodes(html, xpath = xpath_season) %>% html_text() %>% .[[2]]
# extract ranking
xpath_ranking <- "//*[text()[contains(.,'Rangschikking')]]"
match_information$ranking <- html_nodes(html, xpath = xpath_ranking) %>% html_text() %>% .[[2]]
# extract age category
xpath_age_category <- "//*[text()[contains(.,'Categorie')]]"
match_information$age_category <- html_nodes(html, xpath = xpath_age_category) %>% html_text() %>% .[[2]]
# extract match results
xpath_match_results <- "//div[@id='match_list']/table"
match_information$match_results <- try(html_node(html, xpath = xpath_match_results) %>% html_table())
# return result
return(match_information) }
## extract
match_information <- lapply(htmls, function(x) extract(x))
### bind together
## remove pages without results
match_information <- match_information[!sapply(match_information, function(x) class(x[["match_results"]])) == "try-error"]
## add fixed values to results
add.fixed <- function(list_player) {
# repeat fixed values
df_fixed <- as.data.frame(lapply(list_player[1:5], function(x) rep(x, nrow(list_player[["match_results"]]))))
# bind to results
results <- bind_cols(list_player[["match_results"]], df_fixed)
# return
return(results) }
results <- lapply(match_information, add.fixed)
## bind
results <- rbindlist(results)
### clean
## remove empty columns
results <- select(results, -X1, -X13)
## remove rows containing no information
results <- results[complete.cases(select(results, X2:X12)), ]
results <- results[-grep(pattern = "Datum", x = results$X2), ]
## correct column names
names(results) <- c("datum","geslacht","toernooi_id","reeks","club_tegenstander","tegenstander",
"klassering_tegenstander","ELO_tegenstander","sets","ELO","ELO_verandering",
"voornaam","familienaam","seizoen","klassering","leeftijdscategorie")
## correct column values
# sets
results$gewonnen_sets <- substr(results$sets, 1, 1)
results$verloren_sets <- substr(results$sets, 7, 7)
results$sets <- NULL
# season
results$seizoen <- substr(results$seizoen, 9, 12)
# rating
results$klassering <- substr(results$klassering, 19, 20)
# age category
results$leeftijdscategorie <- str_trim(sapply(str_split(string = results$leeftijdscategorie, pattern = "Â"), function(x) x[3]))
## correct data types
# date
results$datum <- as.Date(results$datum)
# factor and numeric
factor_var <- c("geslacht","toernooi_id","reeks","club_tegenstander","klassering_tegenstander",
"seizoen","klassering","leeftijdscategorie")
num_var <- c("ELO_tegenstander","ELO","ELO_verandering","gewonnen_sets","verloren_sets")
results <- results %>% mutate_each_(funs(factor), factor_var) %>% mutate_each_(funs(as.numeric), num_var)
View(results)
sapply(results, class)
results <- mutate(results, naam = paste(voornaam, familienaam, sep = " "))
sapply(results, class)
table(results$naam)
results <- mutate(results, naam = factor(paste(voornaam, familienaam, sep = " ")))
table(results$naam)
sapply(results, class)
View(results)
results$gewonnen_sets - results$verloren_sets
results$gewonnen_sets - results$verloren_sets > 0
results$resultaat[results$gewonnen_sets - results$verloren_sets > 0] <- "W"
View(results)
results$resultaat[is.na(results$resultaat)] <- "V"
View(results)
sapply(results, class)
results$resultaat <- factor(results$resultaat)
sapply(results, class)
View(results)
?save
save(results, file = paste0(save_path, "\\tccmaldegem_ledenresultaten.RData"))
save_path <- "C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten"
save(results, file = paste0(save_path, "\\tccmaldegem_ledenresultaten.RData"))
write.csv(results, file = paste0(save_path, "\\tccmaldegem_ledenresultaten.csv"))
write.csv(results, file = paste0(save_path, "\\tccmaldegem_ledenresultaten.csv"), row.names = FALSE)
write.csv(results, file = paste0(save_path, "\\tccmaldegem_ledenresultaten.csv"), row.names = FALSE)
rm(list = ls())
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
sapply(results, class)
View(results)
table(results$klassering)
table(results$klassering_tegenstander)
which(results$klassering_tegenstander %in% c("A7","A26"))
results <- results[-results$klassering_tegenstander %in% c("A7","A26"), ]
### packages
library(dplyr)
library(ggplot2)
### load data
load("C:\\Users\\Felix Timmermans\\Desktop\\pingpong\\data\\datasets\\tccmaldegem_ledenresultaten\\tccmaldegem_ledenresultaten.RData")
### prepare data
## remove odd ranking categories
table(results$klassering_tegenstander)
results$klassering_tegenstander %in% c("A7","A26")
results <- results[!results$klassering_tegenstander %in% c("A7","A26"), ]
View(results)
table(results$klassering_tegenstander)
results$klassering_tegenstander <- droplevels(results$klassering_tegenstander)
table(results$klassering_tegenstander)
?mapvalues
table(results$klassering)
unique(results$klassering)
sort(unique(results$klassering))
klassering_levels <- sort(unique(results$klassering))
klassering_levels <- sort(as.character(unique(results$klassering)))
klassering_levels
results$klassering_num <- mapvalues(x = results$klassering,
from = klassering_levels,
to = 1:length(klassering_levels))
library(plyr)
